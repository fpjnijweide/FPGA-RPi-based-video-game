LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
ENTITY module51 IS
PORT (

reset : in STD_logic;

FPGAclock : in  STD_LOGIC;
slaveclock  : in  STD_Logic;
slave       : in  STD_LOGIC;
buttonleft  : in  STD_LOGIC;
buttonright : in  STD_LOGIC;
buttonenter : in  STD_LOGIC;

speedx      : in std_logic;
speedy      : in std_logic;
isvertical  : in std_logic;

accelclock  :
accelslave  : out std_

newspeedx   : out STD_Logic;
newspeedy	: out STD_Logic;
buttons		: out STD_Logic;
accelerometer : out std_logic;


digit0 : out std_logic_vector( 6 downto 0);
digit1 : out std_logic_vector( 6 downto 0);
digit2 : out std_logic_vector( 6 downto 0);
digit3 : out std_logic_vector( 6 downto 0);
digit4 : out std_logic_vector( 6 downto 0);
digit5 : out std_logic_vector( 6 downto 0);

LED1 : out STD_Logic;
LED2 : out STD_Logic;
LED3 : out STD_Logic;
LED4 : out STD_Logic;
LED5 : out STD_Logic;
LED6 : out STD_Logic;
LED7 : out STD_Logic;
LED8 : out STD_Logic;
LED9 : out STD_Logic;
LED10 : out STD_Logic

);

END module51;


ARCHITECTURE sselect OF module51 IS

--signals to receive

signal wordspeedx     : STD_Logic_vector(7 downto 0);
signal wordspeedy     : STD_Logic_vector(7 downto 0); 
signal wordisvertical : STD_Logic_vector(7 downto 0); 


--signals to temporarily store

signal speedx_reg      : STD_Logic_vector(7 downto 0); 
signal speedy_reg      : STD_Logic_vector(7 downto 0);
signal isvertical_reg  : STD_Logic_vector(7 downto 0);

signal slaveclock_s    : std_logic;  -- sync incoming sck to FPGA clock
signal slaveclock_d    : std_logic;  -- delay flop for edge detect
signal speedx_s        : std_logic;  -- sync to FPGA clock
signal speedy_s        : std_logic;  -- sync to FPGA clock
signal isvertical_s    : std_logic;  -- sync to FPGA clock

signal slaveselect_s   : std_logic;  -- sync
signal slaveselect_d   : std_logic;  -- delay for edge detect
	 
	 
--signals to send

signal xnewspeed : std_logic_vector(7 downto 0);
signal ynewspeed : std_logic_vector(7 downto 0);
signal accelero  : std_logic_vector(7 downto 0);
signal button    : std_logic_vector(7 downto 0) := "00000000"; --0000 0000 for no buttions pressed/all buttons pressed 1100 1100 left

--signals to store temporarily

signal xnewspeed_reg : std_logic_vector(7 downto 0) := "00000000";
signal ynewspeed_reg : std_logic_vector(7 downto 0) := "00000000";
signal accelero_reg  : std_logic_vector(7 downto 0) := "00000000";
signal button_reg    : std_logic_vector(7 downto 0) := "00000000";

signal count : integer range 0 to 7:= 7;


-- hex2display


FUNCTION hex2display (n:std_logic_vector(3 DOWNTO 0)) RETURN std_logic_vector IS
    		VARIABLE res : std_logic_vector(6 DOWNTO 0);
  	BEGIN
    		CASE n IS          --        gfedcba; low active
		    WHEN "0000" => RETURN NOT "0111111";
		    WHEN "0001" => RETURN NOT "0000110";
		    WHEN "0010" => RETURN NOT "1011011";
		    WHEN "0011" => RETURN NOT "1001111";
		    WHEN "0100" => RETURN NOT "1100110";
		    WHEN "0101" => RETURN NOT "1101101";
		    WHEN "0110" => RETURN NOT "1111101";
		    WHEN "0111" => RETURN NOT "0000111";
		    WHEN "1000" => RETURN NOT "1111111";
		    WHEN "1001" => RETURN NOT "1101111";
		    WHEN "1010" => RETURN NOT "1110111";
		    WHEN "1011" => RETURN NOT "1111100";
		    WHEN "1100" => RETURN NOT "0111001";
		    WHEN "1101" => RETURN NOT "1011110";
		    WHEN "1110" => RETURN NOT "1111001";
		    WHEN OTHERS => RETURN NOT "1110001";		
    		END CASE;
  	END hex2display;

begin







-- sending and receiving

process(FPGAclock)

begin


if rising_edge(FPGAclock) then

slaveclock_s <= slaveclock;
speedx_s <= speedx;
speedy_s <= speedy;
isvertical_s <= isvertical;
slaveselect_s <= slave;

slaveclock_d <= slaveclock_s;
slaveselect_d <= slaveselect_s;

--shifter
if slaveselect_s = '0' then
	
	if slaveclock_s = '0' and slaveclock_d = '1' then
	
		
		if count > -1 then
		speedx_reg <= speedx_reg(speedx_reg'left -1 downto 0) & speedx_s;
		speedy_reg <= speedy_reg(speedy_reg'left -1 downto 0) & speedy_s;
		isvertical_reg <= isvertical_reg(isvertical_reg'left -1 downto 0) & isvertical_s;
		end if;
		
		--final signal send
		
		buttons <= button_reg(count);
		newspeedx <= xnewspeed_reg(count);
		newspeedy <= ynewspeed_reg(count);
		accelerometer <= accelero_reg(count);
		
		--shift the bits in the signals to send
		count <= count -1;
		
		
	end if;

end if;

--save the new words
if slaveselect_s = '1' and slaveselect_d = '0' then

	wordspeedx <= speedx_reg;
	wordspeedy <= speedy_reg;
	wordisvertical <= isvertical_reg;

	xnewspeed_reg <= xnewspeed;
	ynewspeed_reg <= ynewspeed;
	accelero_reg <= accelero;
	button_reg <= button;
	
	count <=7;
	
end if;

end if;

end process;



-- display

process(slaveselect_s, reset)

begin

if reset = '0' then

	digit0 <= "0000000";
	digit1 <= "0000000";
	digit2 <= "0000000";
	digit3 <= "0000000";
	digit4 <= "0000000";
	digit5 <= "0000000";

elsif slaveselect_s = '1' then

	digit0 <= hex2display(wordspeedx(3 downto 0));
	digit1 <= hex2display(wordspeedx(7 downto 4));
	digit2 <= hex2display(wordspeedy(3 downto 0));
	digit3 <= hex2display(wordspeedy(7 downto 4));
	digit4 <= hex2display(wordisvertical(3 downto 0));
	digit5 <= hex2display(wordisvertical(7 downto 4));

end if;

end process;






--buttons

process(buttonleft, buttonright, buttonenter)

begin

if buttonleft = '0' and buttonright = '1' and buttonenter = '1'  then

	button <= "11001100";

elsif buttonleft = '1' and buttonright = '0' and buttonenter = '1' then

	button <= "00110011";

elsif buttonleft = '1' and buttonright = '1' and buttonenter = '0' then

	button <= "11111111";
	
else

	button <= "00000000";

end if;

end process;


-- speed calculations

--process(wordspeedx)

--begin


--end process;




end sselect;